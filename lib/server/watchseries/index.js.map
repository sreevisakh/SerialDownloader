{"version":3,"sources":["watchseries/index.js"],"names":["w","handleError","res","error","name","status","send","getSerialDetails","req","get","params","id","response","log","JSON","parse","url","watchseries","then","processHTML","seriesHtml","$","load","seasons","getSeasons","set","stringify","season","each","$season","find","first","text","parseInt","test","episodes","$episodes","index","episode","trim","exec","e","Math","random","push","sort","a","b"],"mappings":"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","file":"watchseries/index.js","sourcesContent":["import 'babel-polyfill';\nimport config from '../config'\nimport request from 'request-promise';\nimport cheerio from 'cheerio';\nimport cache from '../cache';\nimport * as w from 'winston';\n\nfunction handleError(res) {\n    return function(error) {\n        w.error(error.name);\n        res.status(500).send(error);\n    }\n}\n\nfunction getSerialDetails(req, res) {\n    cache.get(`Serial:${req.params.id}`, function(response) {\n        if (response) {\n            w.log(`From Cache : Serial:${req.params.id} : ${response}`);\n            return res.status(200).send(JSON.parse(response));\n        } else {\n            let url = `${config.watchseries.url}serie/${req.params.id}`;\n            request(url).then(processHTML(req, res), handleError(res));\n        }\n    })\n}\n\nfunction processHTML(req, res) {\n    return function(seriesHtml) {\n        let $ = cheerio.load(seriesHtml);\n        let seasons = getSeasons($);\n        w.log(`To Cache : Serial:${req.params.id}`);\n        cache.set(`Serial:${req.params.id}`, JSON.stringify(seasons));\n        res.send(seasons);\n    }\n}\n\nfunction getSeasons($) {\n    let seasons = [];\n    let season = {};\n    $('[itemprop=season]').each(function() {\n        let $season = $(this).find('span[itemprop=name]').first().text();\n        try {\n            season = {\n                id: parseInt(/\\d+/.test($season)[0]),\n                episodes: []\n            }\n        } catch (error) {\n            w.error('Error in parsing Season id', $season);\n\n        }\n\n        let $episodes = $(this).find('[itemprop=\"episode\"]');\n        $episodes.each(function(index) {\n            let episode = {\n                name: $(this).find('[itemprop=name]').text().trim(),\n\n                url: `${config.watchseries.url}episode/s${season.id}_e${index}.html`\n            }\n            try {\n                episode.id = /Episode (\\d+)/.exec(episode.name)[1];\n            } catch (e) {\n                w.error('Error in parsing Episode id', episode.name);\n                episode.id = Math.random();\n            }\n            season.episodes.push(episode);\n        })\n        season.episodes.sort((a, b) => a.id - b.id);\n        seasons.push(season);\n    })\n    seasons.sort((a, b) => a.id - b.id);\n    return seasons;\n}\n\nexport default {\n    getSerialDetails\n}"],"sourceRoot":"/source/"}