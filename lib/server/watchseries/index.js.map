{"version":3,"sources":["watchseries/index.js"],"names":["handleError","res","error","console","name","status","send","getSerialDetails","req","get","params","id","response","log","JSON","parse","url","watchseries","then","processHTML","seriesHtml","$","load","seasons","getSeasons","set","stringify","season","each","$season","find","text","parseInt","exec","join","episodes","$episodes","index","episode","split","push","sort","a","b"],"mappings":"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","file":"watchseries/index.js","sourcesContent":["import 'babel-polyfill';\nimport config from '../config'\nimport request from 'request-promise';\nimport cheerio from 'cheerio';\nimport cache from '../cache';\n\nfunction handleError(res) {\n    return function(error) {\n        console.error(error.name);\n        res.status(500).send(error);\n    }\n}\n\nfunction getSerialDetails(req, res) {\n    cache.get(`Serial:${req.params.id}`, function(response) {\n        if (response) {\n            console.log(`From Cache : Serial:${req.params.id} : ${response}`);\n            return res.status(200).send(JSON.parse(response));\n        } else {\n            let url = `${config.watchseries.url}serie/${req.params.id}`;\n            request(url).then(processHTML(req, res), handleError(res));\n        }\n    })\n}\n\nfunction processHTML(req, res) {\n    return function(seriesHtml) {\n        let $ = cheerio.load(seriesHtml);\n        let seasons = getSeasons($);\n        console.log(`To Cache : Serial:${req.params.id}`);\n        cache.set(`Serial:${req.params.id}`, JSON.stringify(seasons));\n        res.send(seasons);\n    }\n}\n\nfunction getSeasons($) {\n    let seasons = [];\n    let season = {};\n    $('[itemprop=season]').each(function() {\n        let $season = $(this).find('[itemprop=name]').text();\n        season = {\n            id: parseInt(/[0-9]+\\s/.exec($season).join()),\n            episodes: []\n        }\n\n        let $episodes = $(this).find('[itemprop=\"episode\"]');\n        $episodes.each(function(index) {\n            let episode = {\n                name: $(this).find('[itemprop=name]').text(),\n\n                url: `${config.watchseries.url}episode/s${season.id}_e${index}.html`\n            }\n            episode.id = episode.name.split(' ')[1];\n            season.episodes.push(episode);\n        })\n        season.episodes.sort((a, b) => a.id - b.id);\n        seasons.push(season);\n    })\n    seasons.sort((a, b) => a.id - b.id);\n\n\n    return seasons;\n}\n\nexport default {\n    getSerialDetails\n}"],"sourceRoot":"/source/"}